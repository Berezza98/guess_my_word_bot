require('dotenv').config();
const mongoose = require('mongoose');
const { Telegraf } = require('telegraf');
const Markup = require('telegraf/markup');
const Extra = require('telegraf/extra');

const Game = require('./models/Game');

const app = new Telegraf(process.env.TELEGRAM_API_KEY);

const uk_keyboard_chars = ['–∞', '–±', '–≤', '–≥', '“ë', '–¥', '–µ', '—î', '–∂', '–∑', '–∏', '—ñ', '—ó', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—å', '—é', '—è'];
const re_keyboard_chars = ['–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å', '—ç', '—é', '—è'];
const en_keyboard_chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];

const devideArray = (arr, number = 5, emptyEl = Markup.callbackButton(' ', ' ')) => {
  // console.log(arr);
  const resultArray = [];
  do {
    if (arr.length < number) { // –ó–∞–ø–æ–≤–Ω—é—é –≤—Å—ñ —è—á–µ–π–∫–∏, —â–æ–± —É—Ç–≤–æ—Ä–∏–ª–∞—Å—å —Ä—ñ–≤–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è(–∫–≤–∞–¥—Ä–∞—Ç–Ω–∞.–ø—Ä—è–º–æ–∫—É—Ç–Ω–∞)(–¥–ª—è –∫—Ä–∞—Å–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏)
      const diff = number - arr.length;
      arr = [...arr, ...new Array(diff).fill(emptyEl)];
    }
    resultArray.push(arr.splice(0, number));
  } while (arr.length);
  return resultArray;
};

const createWordButtons = (word = '', showInviteButton, chars = []) => {
  const wordButtons = devideArray(word.split('').map(el => {
    return Markup.callbackButton(chars.includes(el) ? el : '*' , ' ');
  }));
  wordButtons.push([Markup.callbackButton('üîù–í—ñ–¥–≥–∞–¥–∞–π —Å–ª–æ–≤–æüîù', ' ')]);

  const charKeyboard = devideArray(uk_keyboard_chars.map(el => Markup.callbackButton(el, el)));
  wordButtons.push(...charKeyboard);

  if (showInviteButton) {
    wordButtons.push([Markup.callbackButton('–ü—Ä–∏–π–Ω—è—Ç–∏ –≥—Ä—É', 'join')]);
  }

  return Markup.inlineKeyboard(wordButtons);
}

app.use(async (ctx, next) => {
  const { inlineMessageId, from } = ctx;
  if (!inlineMessageId) {
    return next();
  }
  const game = await Game.findOne({ gameId: inlineMessageId, 'secondPlayer.id': from.id });
  ctx.state.currentGame = game || null;
  next();
});

app.on('text', (ctx) => {
  ctx.reply('–í–≥–∞–¥–∞–π —Å–ª–æ–≤–æ',
    Extra.markdown().markup(
      Markup.inlineKeyboard([[Markup.switchToChatButton('–ì—Ä–∞—Ç–∏ –∑ –¥—Ä—É–≥–æ–º', '')]])
    )
  );
});

app.on('chosen_inline_result', async (ctx) => {
  const  { from, inline_message_id, query } = ctx.update.chosen_inline_result;
  await new Game({
    gameId: inline_message_id,
    wordToGuess: query,
    firstPlayer: from
  }).save();
});

app.inlineQuery(async (wordToGuess, ctx) => {
  await ctx.answerInlineQuery([
    {
      type: 'article',
      id: '1',
      title: '–ü–æ—á–∞—Ç–∏ –ì—Ä—É',
      input_message_content: {
        message_text: '–ü–æ—á–∞—Ç–∏ –ì—Ä—É'
      },
      reply_markup: createWordButtons(wordToGuess, true)
    }
  ]);
});

app.action('join', async (ctx) => {
  const gameId = ctx.inlineMessageId;
  const neededGame = await Game.findOne({ gameId });
  if (!neededGame) {
    return ctx.answerCbQuery('–î–∞–Ω–æ—ó –≥—Ä–∏ –Ω–µ —ñ—Å–Ω—É—î, –±—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É –≥—Ä—É!');
  }
  if (ctx.from.id === neededGame.firstPlayer.id) {
    return ctx.answerCbQuery('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏ —Å–≤–æ—é –∂ –≥—Ä—É!');
  }
  neededGame.secondPlayer = ctx.from;
  await neededGame.save();
  ctx.answerCbQuery('–í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –≥—Ä—É!');
  ctx.editMessageText(`–ì—Ä—É –ø—Ä–∏–π–Ω—è—Ç–æ!`, {
    reply_markup: createWordButtons(neededGame.wordToGuess)
  });
});

app.action(uk_keyboard_chars, async (ctx, next) => {
  const { currentGame } = ctx.state;
  if (!currentGame) {
    return next();
  }
  if (currentGame.usedChars.includes(ctx.match)) {
    return ctx.answerCbQuery(`–í–∏ –≤–∂–µ –æ–±–∏—Ä–∞–ª–∏ –¥–∞–Ω—É –±—É–∫–≤—É!(${ctx.match})`);
  }
  currentGame.usedChars.push(ctx.match);
  if (!currentGame.wordToGuess.includes(ctx.match)) {
    currentGame.attempts -= 1;
    ctx.answerCbQuery(`–ë—É–∫–≤–∞ –Ω–µ –≤–≥–∞–¥–∞–Ω–∞, –∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${currentGame.attempts}!`);
    if (currentGame.attempts <= 0) {
      await Game.deleteOne({ gameId: currentGame.gameId });
      return ctx.editMessageText(`–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏! —Å–ª–æ–≤–æ: "${currentGame.wordToGuess}"`);
    }
  } else {
    const won = currentGame.wordToGuess.split('').every(el => currentGame.usedChars.includes(el));
    if (won) {
      await Game.deleteOne({ gameId: currentGame.gameId });
      ctx.answerCbQuery(`–í–∏ –≤–∏–≥—Ä–∞–ª–∏!`);
      return ctx.editMessageText(`–í–∏ –≤–∏–≥—Ä–∞–ª–∏! —Å–ª–æ–≤–æ: "${currentGame.wordToGuess}"`);
    } else {
      ctx.answerCbQuery(`–ë—É–∫–≤–∞ –≤–≥–∞–¥–∞–Ω–∞, –∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${currentGame.attempts}!`);
      ctx.editMessageText(`–ë—É–∫–≤–∞ –≤–≥–∞–¥–∞–Ω–∞: ${ctx.match}`, {
        reply_markup: createWordButtons(currentGame.wordToGuess, null, currentGame.usedChars)
      });
    }
  }
  await currentGame.save();
});

app.action(async (match, ctx) => {
  ctx.answerCbQuery('–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ!');
});

async function main() {
  const { MONGOLAB_URI, TELEGRAM_API_KEY, BOT_URL, PORT } = process.env;
  try {
    await mongoose.connect(MONGOLAB_URI, { useNewUrlParser: true });
    if (process.env.NODE_ENV === 'production') {
      console.log(`${BOT_URL}bot${TELEGRAM_API_KEY}`, PORT);
      app.telegram.setWebhook(`${BOT_URL}bot${TELEGRAM_API_KEY}`);
      app.startWebhook(`bot${TELEGRAM_API_KEY}`, null, PORT);
    } else {
      await app.launch();
    }
    console.log('CONNECTED TO DB AND LAUNCHED');
  } catch (error) {
    console.log(error);
  }
}

main();